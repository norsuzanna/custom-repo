{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Search","Input","Title","Typography","Text","App","useState","loading","setLoading","project","setProject","isFiltered","setfilter","message","setMessage","className","orientation","level","placeholder","onSearch","value","axios","get","then","res","data","items","length","onChange","event","target","pagination","pageSize","itemLayout","dataSource","renderItem","item","Item","extra","status","text","language","type","theme","forks","avatar","title","active","Meta","href","full_name","description","disabled","moment","updated_at","format","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kXAMQA,EAAWC,IAAXD,OACAE,EAAgBC,IAAhBD,MAAOE,EAASD,IAATC,KAqHAC,EAnHH,WAAO,IAAD,EACcC,oBAAS,GADvB,mBACTC,EADS,KACAC,EADA,OAEcF,mBAAS,IAFvB,mBAETG,EAFS,KAEAC,EAFA,OAGgBJ,oBAAS,GAHzB,mBAGTK,EAHS,KAGGC,EAHH,OAIcN,mBAAS,IAJvB,mBAITO,EAJS,KAIAC,EAJA,KAmChB,OACE,yBAAKC,UAAU,OACb,kBAAC,IAAD,CAASC,YAAY,QACnB,kBAACd,EAAD,CAAOe,MAAO,GAAd,kBAEF,yBAAKF,UAAU,eACb,kBAACf,EAAD,CACEkB,YAAY,qBACZC,SArCc,SAAAC,GACpBR,GAAU,GACVJ,GAAW,GACXM,EAAW,cAEXO,IACGC,IACC,qEACEF,GAEHG,MAAK,SAAAC,GAC0B,IAA1BA,EAAIC,KAAKC,MAAMC,SACjBf,GAAU,GACVE,EAAW,oBAGbJ,EAAW,YAAIc,EAAIC,KAAKC,QACxBlB,GAAW,OAqBToB,SAjBe,SAAAC,GACM,KAAvBA,EAAMC,OAAOV,QACfV,EAAW,IACXI,EAAW,IACXF,GAAU,KAcNG,UAAU,eAEZ,kBAACb,EAAD,CAAOe,MAAO,GACXV,EACGM,EACAJ,EAAQkB,OAAS,EACjBlB,EAAQkB,OAAS,sBACjBd,GAELF,GACC,kBAAC,IAAD,CACEJ,QAASA,EACTwB,WAAY,CACVC,SAAU,IAEZC,WAAW,WACXC,WAAYzB,EACZ0B,WAAY,SAAAC,GAAI,OACd,kBAAC,IAAKC,KAAN,CACEC,MACE,yBAAKvB,UAAU,aACb,kBAAC,IAAD,CACEA,UAAU,gBACVwB,OAAO,UACPC,KAAMJ,EAAKK,WAEb,yBAAK1B,UAAU,iBACb,kBAAC,IAAD,CACE2B,KAAK,OACLC,MAAM,SACN5B,UAAU,mBAEZ,kBAACX,EAAD,KAAOgC,EAAKQ,UAKlB,kBAAC,IAAD,CAAUC,QAAM,EAACC,OAAO,EAAOvC,QAASA,EAASwC,QAAM,GACrD,kBAAC,IAAKV,KAAKW,KAAX,CACEF,MAAO,uBAAGG,KAAK,sBAAsBb,EAAKc,WAC1CC,YAAaf,EAAKe,cAEpB,kBAAC/C,EAAD,CAAMgD,UAAQ,GAAd,aACa,IACVC,IAAOjB,EAAKkB,YAAYC,OAAO,4BCtFhCC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5C,MAAK,SAAA6C,GACjCA,EAAaC,kB","file":"static/js/main.a7426415.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./App.css\";\nimport { Divider, Input, Typography, List, Skeleton, Badge, Icon } from \"antd\";\nimport axios from \"axios\";\nimport moment from \"moment\";\n\nconst { Search } = Input;\nconst { Title, Text } = Typography;\n\nconst App = () => {\n  const [loading, setLoading] = useState(false);\n  const [project, setProject] = useState([]);\n  const [isFiltered, setfilter] = useState(false);\n  const [message, setMessage] = useState(\"\");\n\n  const searchProject = value => {\n    setfilter(true);\n    setLoading(true);\n    setMessage(\"Loading...\");\n\n    axios\n      .get(\n        \"https://api.github.com/search/repositories?per_page=${per_page}&q=\" +\n          value\n      )\n      .then(res => {\n        if (res.data.items.length === 0) {\n          setfilter(false);\n          setMessage(\"No result found\");\n        }\n\n        setProject([...res.data.items]);\n        setLoading(false);\n      });\n  };\n\n  const handleOnChange = event => {\n    if (event.target.value === \"\") {\n      setProject([]);\n      setMessage(\"\");\n      setfilter(false);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <Divider orientation=\"left\">\n        <Title level={3}>Github Search</Title>\n      </Divider>\n      <div className=\"App-content\">\n        <Search\n          placeholder=\"Enter project name\"\n          onSearch={searchProject}\n          onChange={handleOnChange}\n          className=\"App-search\"\n        />\n        <Title level={4}>\n          {loading\n            ? message\n            : project.length > 0\n            ? project.length + \" repository results\"\n            : message}\n        </Title>\n        {isFiltered && (\n          <List\n            loading={loading}\n            pagination={{\n              pageSize: 10\n            }}\n            itemLayout=\"vertical\"\n            dataSource={project}\n            renderItem={item => (\n              <List.Item\n                extra={\n                  <div className=\"App-extra\">\n                    <Badge\n                      className=\"App-extra-div\"\n                      status=\"default\"\n                      text={item.language}\n                    />\n                    <div className=\"App-extra-div\">\n                      <Icon\n                        type=\"star\"\n                        theme=\"filled\"\n                        className=\"App-extra-icon\"\n                      />\n                      <Text>{item.forks}</Text>\n                    </div>\n                  </div>\n                }\n              >\n                <Skeleton avatar title={false} loading={loading} active>\n                  <List.Item.Meta\n                    title={<a href=\"https://ant.design\">{item.full_name}</a>}\n                    description={item.description}\n                  />\n                  <Text disabled>\n                    Updated on{\" \"}\n                    {moment(item.updated_at).format(\"ddd MMM DD YYYY\")}\n                  </Text>\n                </Skeleton>\n              </List.Item>\n            )}\n          />\n        )}\n      </div>\n      {/* <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header> */}\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}